package com.google.android.gms.common.api.internal;

import java.util.concurrent.*;
import com.google.android.gms.common.api.*;

public final class zzr<R extends Result> extends OptionalPendingResult<R>
{
    private final zzb<R> zzaiy;
    
    public zzr(final PendingResult<R> pendingResult) {
        if (!(pendingResult instanceof zzb)) {
            throw new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
        }
        this.zzaiy = (zzb<R>)pendingResult;
    }
    
    @Override
    public R await() {
        return this.zzaiy.await();
    }
    
    @Override
    public R await(final long n, final TimeUnit timeUnit) {
        return this.zzaiy.await(n, timeUnit);
    }
    
    @Override
    public void cancel() {
        this.zzaiy.cancel();
    }
    
    @Override
    public R get() {
        if (this.isDone()) {
            return this.await(0L, TimeUnit.MILLISECONDS);
        }
        throw new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
    }
    
    @Override
    public boolean isCanceled() {
        return this.zzaiy.isCanceled();
    }
    
    @Override
    public boolean isDone() {
        return this.zzaiy.isReady();
    }
    
    @Override
    public void setResultCallback(final ResultCallback<? super R> resultCallback) {
        this.zzaiy.setResultCallback(resultCallback);
    }
    
    @Override
    public void setResultCallback(final ResultCallback<? super R> resultCallback, final long n, final TimeUnit timeUnit) {
        this.zzaiy.setResultCallback(resultCallback, n, timeUnit);
    }
    
    @Override
    public void zza(final zza zza) {
        this.zzaiy.zza(zza);
    }
    
    @Override
    public Integer zzpa() {
        return this.zzaiy.zzpa();
    }
}
